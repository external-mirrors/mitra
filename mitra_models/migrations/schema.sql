CREATE TABLE internal_property (
    property_name VARCHAR(100) PRIMARY KEY,
    property_value JSONB NOT NULL
);

CREATE TABLE background_job (
    id UUID PRIMARY KEY,
    job_type SMALLINT NOT NULL,
    job_data JSONB NOT NULL,
    job_status SMALLINT NOT NULL DEFAULT 1,
    scheduled_for TIMESTAMP WITH TIME ZONE NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE instance (
    hostname VARCHAR(100) PRIMARY KEY
);

CREATE TABLE filter_rule (
    id INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    target VARCHAR(2000) NOT NULL,
    filter_action SMALLINT NOT NULL,
    is_reversed BOOLEAN NOT NULL,
    UNIQUE (target, filter_action)
);

CREATE TABLE actor_profile (
    id UUID PRIMARY KEY,
    user_id UUID UNIQUE,
    portable_user_id UUID UNIQUE,
    username VARCHAR(100) NOT NULL,
    hostname VARCHAR(100) REFERENCES instance (hostname) ON DELETE RESTRICT,
    acct VARCHAR(200) UNIQUE,
    display_name VARCHAR(200),
    bio TEXT,
    bio_source TEXT,
    avatar JSONB,
    banner JSONB,
    manually_approves_followers BOOLEAN NOT NULL,
    mention_policy SMALLINT NOT NULL,
    public_keys JSONB NOT NULL DEFAULT '[]',
    identity_proofs JSONB NOT NULL DEFAULT '[]',
    payment_options JSONB NOT NULL DEFAULT '[]',
    extra_fields JSONB NOT NULL DEFAULT '[]',
    aliases JSONB NOT NULL DEFAULT '[]',
    follower_count INTEGER NOT NULL CHECK (follower_count >= 0) DEFAULT 0,
    following_count INTEGER NOT NULL CHECK (following_count >= 0) DEFAULT 0,
    subscriber_count INTEGER NOT NULL CHECK (subscriber_count >= 0) DEFAULT 0,
    post_count INTEGER NOT NULL CHECK (post_count >= 0) DEFAULT 0,
    emojis JSONB NOT NULL DEFAULT '[]',
    actor_json JSONB,
    actor_id VARCHAR(2000) UNIQUE GENERATED ALWAYS AS (actor_json ->> 'id') STORED,
    identity_key VARCHAR(100) UNIQUE,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    unreachable_since TIMESTAMP WITH TIME ZONE,
    CHECK (user_id IS NULL OR user_id = id),
    CHECK (portable_user_id IS NULL OR portable_user_id = id)
);

CREATE TABLE user_invite_code (
    code VARCHAR(100) PRIMARY KEY,
    used BOOLEAN NOT NULL DEFAULT FALSE,
    note VARCHAR(200),
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE user_account (
    id UUID PRIMARY KEY REFERENCES actor_profile (id) ON DELETE CASCADE,
    password_hash VARCHAR(200),
    login_address_ethereum VARCHAR(500) UNIQUE,
    login_address_monero VARCHAR(500) UNIQUE,
    rsa_private_key TEXT NOT NULL,
    ed25519_private_key BYTEA,
    invite_code VARCHAR(100) UNIQUE REFERENCES user_invite_code (code) ON DELETE SET NULL,
    user_role SMALLINT NOT NULL,
    client_config JSONB NOT NULL DEFAULT '{}',
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()
);

ALTER TABLE actor_profile
    ADD CONSTRAINT actor_profile_user_id_fkey
    FOREIGN KEY (user_id) REFERENCES user_account (id) ON DELETE RESTRICT;

CREATE TABLE caip122_nonce (
    account_id VARCHAR(500) NOT NULL,
    nonce VARCHAR(100) NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (account_id, nonce)
);

CREATE TABLE oauth_application (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    app_name VARCHAR(100) NOT NULL,
    website VARCHAR(100),
    scopes VARCHAR(200) NOT NULL,
    redirect_uri VARCHAR(2000) NOT NULL,
    client_id UUID UNIQUE NOT NULL,
    client_secret VARCHAR(100) NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE oauth_authorization (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    code VARCHAR(100) UNIQUE NOT NULL,
    user_id UUID NOT NULL REFERENCES user_account (id) ON DELETE CASCADE,
    application_id INTEGER NOT NULL REFERENCES oauth_application (id) ON DELETE CASCADE,
    scopes VARCHAR(200) NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    expires_at TIMESTAMP WITH TIME ZONE NOT NULL
);

CREATE TABLE oauth_token (
    id SERIAL PRIMARY KEY,
    owner_id UUID NOT NULL REFERENCES user_account (id) ON DELETE CASCADE,
    token VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL,
    expires_at TIMESTAMP WITH TIME ZONE NOT NULL
);

CREATE TABLE portable_user_account (
    id UUID PRIMARY KEY REFERENCES actor_profile (id) ON DELETE CASCADE,
    rsa_secret_key BYTEA NOT NULL,
    ed25519_secret_key BYTEA NOT NULL,
    invite_code VARCHAR(100) UNIQUE REFERENCES user_invite_code (code) ON DELETE SET NULL,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP
);

ALTER TABLE actor_profile
    ADD CONSTRAINT actor_profile_portable_user_id_fkey
    FOREIGN KEY (portable_user_id) REFERENCES portable_user_account (id) ON DELETE RESTRICT;

CREATE TABLE relationship (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    source_id UUID NOT NULL REFERENCES actor_profile (id) ON DELETE CASCADE,
    target_id UUID NOT NULL REFERENCES actor_profile (id) ON DELETE CASCADE,
    relationship_type SMALLINT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    UNIQUE (source_id, target_id, relationship_type),
    CHECK (source_id != target_id)
);

CREATE TABLE follow_request (
    id UUID PRIMARY KEY,
    source_id UUID NOT NULL REFERENCES actor_profile (id) ON DELETE CASCADE,
    target_id UUID NOT NULL REFERENCES actor_profile (id) ON DELETE CASCADE,
    activity_id VARCHAR(2000) UNIQUE,
    request_status SMALLINT NOT NULL,
    has_deprecated_ap_id BOOLEAN NOT NULL DEFAULT FALSE,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    UNIQUE (source_id, target_id),
    CHECK (source_id != target_id)
);

CREATE TABLE post (
    id UUID PRIMARY KEY,
    author_id UUID NOT NULL REFERENCES actor_profile (id) ON DELETE CASCADE,
    content TEXT NOT NULL,
    content_source TEXT,
    in_reply_to_id UUID REFERENCES post (id) ON DELETE CASCADE,
    repost_of_id UUID REFERENCES post (id) ON DELETE CASCADE,
    repost_has_deprecated_ap_id BOOLEAN NOT NULL DEFAULT FALSE,
    visibility SMALLINT NOT NULL,
    is_sensitive BOOLEAN NOT NULL,
    is_pinned BOOLEAN NOT NULL DEFAULT FALSE,
    reply_count INTEGER NOT NULL CHECK (reply_count >= 0) DEFAULT 0,
    reaction_count INTEGER NOT NULL CHECK (reaction_count >= 0) DEFAULT 0,
    repost_count INTEGER NOT NULL CHECK (repost_count >= 0) DEFAULT 0,
    object_id VARCHAR(2000) UNIQUE,
    ipfs_cid VARCHAR(200),
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    updated_at TIMESTAMP WITH TIME ZONE,
    UNIQUE (author_id, repost_of_id)
);

CREATE INDEX post_in_reply_to_id_btree ON post (in_reply_to_id);
CREATE INDEX post_repost_of_id_btree ON post (repost_of_id);

CREATE TABLE post_reaction (
    id UUID PRIMARY KEY,
    author_id UUID NOT NULL REFERENCES actor_profile (id) ON DELETE CASCADE,
    post_id UUID NOT NULL REFERENCES post (id) ON DELETE CASCADE,
    content VARCHAR(102),
    emoji_id UUID REFERENCES emoji (id) ON DELETE CASCADE,
    activity_id VARCHAR(2000) UNIQUE,
    has_deprecated_ap_id BOOLEAN NOT NULL DEFAULT FALSE,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    UNIQUE (author_id, post_id, content),
    CHECK (content IS NOT NULL OR emoji_id IS NULL)
);

CREATE INDEX post_reaction_post_id_btree ON post_reaction (post_id);

CREATE UNIQUE INDEX post_reaction_author_id_post_id_content_null_idx ON post_reaction (author_id, post_id) WHERE content IS NULL;

CREATE TABLE media_attachment (
    id UUID PRIMARY KEY,
    owner_id UUID NOT NULL REFERENCES actor_profile (id) ON DELETE CASCADE,
    file_name VARCHAR(200) NOT NULL,
    file_size INTEGER,
    media_type VARCHAR(50),
    url VARCHAR(2000),
    description TEXT,
    ipfs_cid VARCHAR(200),
    post_id UUID REFERENCES post (id) ON DELETE CASCADE,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()
);

CREATE INDEX media_attachment_post_id_btree ON media_attachment (post_id);

CREATE TABLE mention (
    post_id UUID NOT NULL REFERENCES post (id) ON DELETE CASCADE,
    profile_id UUID NOT NULL REFERENCES actor_profile (id) ON DELETE CASCADE,
    PRIMARY KEY (post_id, profile_id)
);

CREATE TABLE tag (
    id SERIAL PRIMARY KEY,
    tag_name VARCHAR(100) UNIQUE NOT NULL
);

CREATE TABLE post_tag (
    post_id UUID NOT NULL REFERENCES post (id) ON DELETE CASCADE,
    tag_id INTEGER NOT NULL REFERENCES tag (id) ON DELETE CASCADE,
    PRIMARY KEY (post_id, tag_id)
);

CREATE TABLE post_link (
    source_id UUID NOT NULL REFERENCES post (id) ON DELETE CASCADE,
    target_id UUID NOT NULL REFERENCES post (id) ON DELETE CASCADE,
    PRIMARY KEY (source_id, target_id),
    CHECK (source_id != target_id)
);

CREATE TABLE emoji (
    id UUID PRIMARY KEY,
    emoji_name VARCHAR(100) NOT NULL,
    hostname VARCHAR(100) REFERENCES instance (hostname) ON DELETE RESTRICT,
    image JSONB NOT NULL,
    object_id VARCHAR(2000) UNIQUE,
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL,
    UNIQUE (emoji_name, hostname),
    CHECK ((hostname IS NULL) = (object_id IS NULL))
);

CREATE UNIQUE INDEX emoji_name_hostname_null_idx ON emoji (emoji_name) WHERE hostname IS NULL;

CREATE TABLE post_emoji (
    post_id UUID NOT NULL REFERENCES post (id) ON DELETE CASCADE,
    emoji_id UUID NOT NULL REFERENCES emoji (id) ON DELETE CASCADE,
    PRIMARY KEY (post_id, emoji_id)
);

CREATE TABLE profile_emoji (
    profile_id UUID NOT NULL REFERENCES actor_profile (id) ON DELETE CASCADE,
    emoji_id UUID NOT NULL REFERENCES emoji (id) ON DELETE CASCADE,
    PRIMARY KEY (profile_id, emoji_id)
);

CREATE TABLE bookmark (
    id INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    owner_id UUID NOT NULL REFERENCES user_account (id) ON DELETE CASCADE,
    post_id UUID NOT NULL REFERENCES post (id) ON DELETE CASCADE,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    UNIQUE (owner_id, post_id)
);

CREATE TABLE notification (
    id SERIAL PRIMARY KEY,
    sender_id UUID NOT NULL REFERENCES actor_profile (id) ON DELETE CASCADE,
    recipient_id UUID NOT NULL REFERENCES user_account (id) ON DELETE CASCADE,
    post_id UUID REFERENCES post (id) ON DELETE CASCADE,
    reaction_id UUID REFERENCES post_reaction (id) ON DELETE CASCADE,
    event_type SMALLINT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()
);

CREATE TABLE custom_feed (
    id INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    owner_id UUID NOT NULL REFERENCES user_account (id) ON DELETE CASCADE,
    feed_name VARCHAR(200) NOT NULL,
    UNIQUE (owner_id, feed_name)
);

CREATE TABLE custom_feed_source (
    feed_id INTEGER NOT NULL REFERENCES custom_feed (id) ON DELETE CASCADE,
    source_id UUID NOT NULL REFERENCES actor_profile (id) ON DELETE CASCADE,
    PRIMARY KEY (feed_id, source_id)
);

CREATE TABLE timeline_marker (
    id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES user_account (id) ON DELETE CASCADE,
    timeline SMALLINT NOT NULL,
    last_read_id VARCHAR(100) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    UNIQUE (user_id, timeline)
);

CREATE TABLE invoice (
    id UUID PRIMARY KEY,
    sender_id UUID NOT NULL REFERENCES actor_profile (id) ON DELETE CASCADE,
    recipient_id UUID NOT NULL REFERENCES actor_profile (id) ON DELETE CASCADE,
    chain_id VARCHAR(50) NOT NULL,
    amount BIGINT NOT NULL CHECK (amount >= 0),
    invoice_status SMALLINT NOT NULL DEFAULT 1,
    payment_address VARCHAR(500),
    payout_tx_id VARCHAR(200),
    object_id VARCHAR(2000) UNIQUE,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP
    UNIQUE (chain_id, payment_address),
    CHECK (sender_id != recipient_id)
);

CREATE TABLE subscription (
    id INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    sender_id UUID NOT NULL REFERENCES actor_profile (id) ON DELETE CASCADE,
    recipient_id UUID NOT NULL REFERENCES actor_profile (id) ON DELETE CASCADE,
    expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL,
    UNIQUE (sender_id, recipient_id),
    CHECK (sender_id != recipient_id)
);

CREATE TABLE activitypub_object (
    object_id VARCHAR(2000) PRIMARY KEY,
    object_data JSONB NOT NULL,
    profile_id UUID UNIQUE REFERENCES actor_profile (id) ON DELETE CASCADE,
    post_id UUID UNIQUE REFERENCES post (id) ON DELETE CASCADE,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE activitypub_collection_item (
    owner_id UUID NOT NULL REFERENCES portable_user_account (id) ON DELETE CASCADE,
    collection_id VARCHAR(2000) NOT NULL,
    object_id VARCHAR(2000) NOT NULL REFERENCES activitypub_object (object_id) ON DELETE CASCADE,
    UNIQUE (collection_id, object_id)
);
